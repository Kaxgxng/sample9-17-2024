final int numPairs = 6; // จำนวนคู่ภาพ (แทนด้วยสี)
final int cols = 4;     // จำนวนคอลัมน์
final int rows = 3;     // จำนวนแถว

int[][] board = new int[rows][cols]; // Array 2 มิติ สำหรับเก็บรหัสของสี
boolean[][] revealed = new boolean[rows][cols]; // Array 2 มิติ สำหรับเก็บสถานะการเปิดของแต่ละช่อง

int firstSelectionX = -1;
int firstSelectionY = -1;
int secondSelectionX = -1;
int secondSelectionY = -1;
boolean isChecking = false;
int checkDelay = 1000;
int lastCheckTime = 0;

color[] colors = { color(255, 0, 0), color(0, 255, 0), color(0, 0, 255), 
                   color(255, 255, 0), color(0, 255, 255), color(255, 0, 255) };

void setup() {
  size(400, 400);
  shuffleBoard();
}

void draw() {
  background(255);
  drawBoard();
  
  if (isChecking && millis() - lastCheckTime > checkDelay) {
    checkMatch();
  }
}

void mousePressed() {
  if (isChecking) return;
  
  int[] clickedIndex = getClickedIndex();
  
  if (clickedIndex[0] != -1 && !revealed[clickedIndex[0]][clickedIndex[1]]) {
    if (firstSelectionX == -1) {
      firstSelectionX = clickedIndex[0];
      firstSelectionY = clickedIndex[1];
      revealed[firstSelectionX][firstSelectionY] = true;
    } else if (secondSelectionX == -1) {
      secondSelectionX = clickedIndex[0];
      secondSelectionY = clickedIndex[1];
      revealed[secondSelectionX][secondSelectionY] = true;
      isChecking = true;
      lastCheckTime = millis();
    }
  }
}

void checkMatch() {
  if (board[firstSelectionX][firstSelectionY] == board[secondSelectionX][secondSelectionY]) {
    // ถ้าจับคู่ได้
    println("Matched!");
  } else {
    // ถ้าจับคู่ไม่ได้ ปิดการเปิดของช่อง
    revealed[firstSelectionX][firstSelectionY] = false;
    revealed[secondSelectionX][secondSelectionY] = false;
  }
  firstSelectionX = -1;
  firstSelectionY = -1;
  secondSelectionX = -1;
  secondSelectionY = -1;
  isChecking = false;
}

void shuffleBoard() {
  // สุ่มตำแหน่งรหัสสี
  int[] tempBoard = new int[rows * cols];
  for (int i = 0; i < tempBoard.length; i++) {
    tempBoard[i] = i / 2; // สร้างคู่ของรหัสสี
  }
  
  // สุ่มตำแหน่งรหัสสี
  for (int i = 0; i < tempBoard.length; i++) {
    int r = int(random(tempBoard.length));
    int temp = tempBoard[i];
    tempBoard[i] = tempBoard[r];
    tempBoard[r] = temp;
  }

  // กระจายค่าลงใน array 2 มิติ
  int index = 0;
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      board[i][j] = tempBoard[index];
      index++;
    }
  }
}

void drawBoard() {
  int w = width / cols;
  int h = height / rows;
  
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      int x = j * w;
      int y = i * h;
      
      if (revealed[i][j]) {
        fill(colors[board[i][j]]); // แสดงสีที่ถูกเปิด
        rect(x, y, w, h);
      } else {
        fill(200);
        rect(x, y, w, h); // สีเทาแทนการปิดอยู่
      }
    }
  }
}

int[] getClickedIndex() {
  int w = width / cols;
  int h = height / rows;
  
  int col = mouseX / w;
  int row = mouseY / h;
  
  if (col >= 0 && col < cols && row >= 0 && row < rows) {
    return new int[] { row, col };
  }
  
  return new int[] { -1, -1 };
}
